Utilizando o código escrito em Spring Boot disponibilizado como base, realize as seguintes operações. Inicialmente, crie um arquivo .txt e escreva nele a sua interpretação das funcionalidades descritas e os passos que você seguirá para a realização da implementação. Após isso espere que eu confirme ou modifique os passos a serem implementados e, só então, realize as implementações. Mudanças decididas por você nos passos a serem tomados também precisam ser documentadas.

O sistema a ser desenvolvido deve simular entregas por drones. Cada drone possui uma capacidade máxima de peso em quilos (weightLimit), uma quantidade limitada de quilômetros que podem ser percorridos por carga (distancePerCargo), a posição atual do drone na malha de coordenada bidimensional (positionX, positionY), a bateria (battery, que é drenada a cada posição atualizada [pode ser um valor fixo determinado por você]) e uma lista de cargas que aquele drone tem a responsabilidade de entregar (orderList). A cidade deve ser representada como uma malha de coordenadas bidimensional, onde a base do sistema de operações é 1x1. O sistema precisa receber pedidos (Order) contendo a localização para entrega em coordenadas X e Y (destinationX, destinationY) , o peso do pacote (weight) e a prioridade da entrega (Enum.Priority).

O objetivo central é alocar os pacotes nos drones de forma a realizar o menor número possível de viagens, respeitando sempre os limites de peso e alcance estabelecidos. A cada nova requisição de criação de entrega feita (POST em "/api/v1/pedidos") os pedidos devem ser realocados em drones, de forma a optimizar os requisitos previamente mencionados, utilize OrderAllocatorImpl e faça modificações nela ou nas classes modelo conforme necessidade. 

O sistema deve simular o funcionamento dos drones em estados distintos: (Enum.DroneState que possui IDLE, RECHARGING, IN_FLIGHT, DELIVERING e RETURNING_TO_BASE) todos os drones que possuem entregas para serem realizadas (orderList > 0) devem iniciar o processo ao realizar uma request POST em "/api/v1/drones/fly" e devem ter seus estados alterados para IN_FLIGHT. O tempo de voo deve ser considerado, podendo ser controlado por timestamps ou com recursos como threads e sleep, ao alcançar o destino o drone deve receber o estado DELIVERING e permanecerem nesse estado por um breve intervalo (pode determinado por você), após isso o drone deve receber o estado RETURNING_TO_BASE e fazer o caminho mais curto para a base do sistema de operações (considere como 1x1 na malha bidimensional da cidade). A bateria também precisa ser simulada, reduzindo conforme o tempo ou a distância percorrido. Drones que estão na base do sistema de operações (estado IDLE) e tiverem menos de 80.00 de battery devem receber o estado RECHARGING, e devem ficar indisponíveis por determinado intervalo (pode ser um valor determinado por você), ao alcançarem 100.00 de bateria os drones devem voltar ao estado IDLE. Apenas drones com o estado IDLE podem receber propostas de entrega (orders). Além disso, devem existir restrições como a rejeição de pacotes que ultrapassem a capacidade de carga do drone e a limitação de entregas pela distância máxima suportada.


